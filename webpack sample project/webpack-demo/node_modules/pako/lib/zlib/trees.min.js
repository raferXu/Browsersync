"use strict";var utils=require("../utils/common");var Z_FIXED=4;var Z_BINARY=0;var Z_TEXT=1;var Z_UNKNOWN=2;function zero(b){var a=b.length;while(--a>=0){b[a]=0}}var STORED_BLOCK=0;var STATIC_TREES=1;var DYN_TREES=2;var MIN_MATCH=3;var MAX_MATCH=258;var LENGTH_CODES=29;var LITERALS=256;var L_CODES=LITERALS+1+LENGTH_CODES;var D_CODES=30;var BL_CODES=19;var HEAP_SIZE=2*L_CODES+1;var MAX_BITS=15;var Buf_size=16;var MAX_BL_BITS=7;var END_BLOCK=256;var REP_3_6=16;var REPZ_3_10=17;var REPZ_11_138=18;var extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];var extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];var extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];var bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];var DIST_CODE_LEN=512;var static_ltree=new Array((L_CODES+2)*2);zero(static_ltree);var static_dtree=new Array(D_CODES*2);zero(static_dtree);var _dist_code=new Array(DIST_CODE_LEN);zero(_dist_code);var _length_code=new Array(MAX_MATCH-MIN_MATCH+1);zero(_length_code);var base_length=new Array(LENGTH_CODES);zero(base_length);var base_dist=new Array(D_CODES);zero(base_dist);function StaticTreeDesc(d,c,b,a,e){this.static_tree=d;this.extra_bits=c;this.extra_base=b;this.elems=a;this.max_length=e;this.has_stree=d&&d.length}var static_l_desc;var static_d_desc;var static_bl_desc;function TreeDesc(b,a){this.dyn_tree=b;this.max_code=0;this.stat_desc=a}function d_code(a){return a<256?_dist_code[a]:_dist_code[256+(a>>>7)]}function put_short(b,a){b.pending_buf[b.pending++]=(a)&255;b.pending_buf[b.pending++]=(a>>>8)&255}function send_bits(a,c,b){if(a.bi_valid>(Buf_size-b)){a.bi_buf|=(c<<a.bi_valid)&65535;put_short(a,a.bi_buf);a.bi_buf=c>>(Buf_size-a.bi_valid);a.bi_valid+=b-Buf_size}else{a.bi_buf|=(c<<a.bi_valid)&65535;a.bi_valid+=b}}function send_code(b,d,a){send_bits(b,a[d*2],a[d*2+1])}function bi_reverse(c,a){var b=0;do{b|=c&1;c>>>=1;b<<=1}while(--a>0);return b>>>1}function bi_flush(a){if(a.bi_valid===16){put_short(a,a.bi_buf);a.bi_buf=0;a.bi_valid=0}else{if(a.bi_valid>=8){a.pending_buf[a.pending++]=a.bi_buf&255;a.bi_buf>>=8;a.bi_valid-=8}}}function gen_bitlen(t,l){var u=l.dyn_tree;var o=l.max_code;var r=l.stat_desc.static_tree;var c=l.stat_desc.has_stree;var e=l.stat_desc.extra_bits;var a=l.stat_desc.extra_base;var q=l.stat_desc.max_length;var j;var b,d;var p;var i;var k;var g=0;for(p=0;p<=MAX_BITS;p++){t.bl_count[p]=0}u[t.heap[t.heap_max]*2+1]=0;for(j=t.heap_max+1;j<HEAP_SIZE;j++){b=t.heap[j];p=u[u[b*2+1]*2+1]+1;if(p>q){p=q;g++}u[b*2+1]=p;if(b>o){continue}t.bl_count[p]++;i=0;if(b>=a){i=e[b-a]}k=u[b*2];t.opt_len+=k*(p+i);if(c){t.static_len+=k*(r[b*2+1]+i)}}if(g===0){return}do{p=q-1;while(t.bl_count[p]===0){p--}t.bl_count[p]--;t.bl_count[p+1]+=2;t.bl_count[q]--;g-=2}while(g>0);for(p=q;p!==0;p--){b=t.bl_count[p];while(b!==0){d=t.heap[--j];if(d>o){continue}if(u[d*2+1]!==p){t.opt_len+=(p-u[d*2+1])*u[d*2];u[d*2+1]=p}b--}}}function gen_codes(b,h,c){var e=new Array(MAX_BITS+1);var d=0;var f;var g;for(f=1;f<=MAX_BITS;f++){e[f]=d=(d+c[f-1])<<1}for(g=0;g<=h;g++){var a=b[g*2+1];if(a===0){continue}b[g*2]=bi_reverse(e[a]++,a)}}function tr_static_init(){var f;var d;var c;var b;var e;var a=new Array(MAX_BITS+1);c=0;for(b=0;b<LENGTH_CODES-1;b++){base_length[b]=c;for(f=0;f<(1<<extra_lbits[b]);f++){_length_code[c++]=b}}_length_code[c-1]=b;e=0;for(b=0;b<16;b++){base_dist[b]=e;for(f=0;f<(1<<extra_dbits[b]);f++){_dist_code[e++]=b}}e>>=7;for(;b<D_CODES;b++){base_dist[b]=e<<7;for(f=0;f<(1<<(extra_dbits[b]-7));f++){_dist_code[256+e++]=b}}for(d=0;d<=MAX_BITS;d++){a[d]=0}f=0;while(f<=143){static_ltree[f*2+1]=8;f++;a[8]++}while(f<=255){static_ltree[f*2+1]=9;f++;a[9]++}while(f<=279){static_ltree[f*2+1]=7;f++;a[7]++}while(f<=287){static_ltree[f*2+1]=8;f++;a[8]++}gen_codes(static_ltree,L_CODES+1,a);for(f=0;f<D_CODES;f++){static_dtree[f*2+1]=5;static_dtree[f*2]=bi_reverse(f,5)}static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS+1,L_CODES,MAX_BITS);static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES,MAX_BITS);static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES,MAX_BL_BITS)}function init_block(a){var b;for(b=0;b<L_CODES;b++){a.dyn_ltree[b*2]=0}for(b=0;b<D_CODES;b++){a.dyn_dtree[b*2]=0}for(b=0;b<BL_CODES;b++){a.bl_tree[b*2]=0}a.dyn_ltree[END_BLOCK*2]=1;a.opt_len=a.static_len=0;a.last_lit=a.matches=0}function bi_windup(a){if(a.bi_valid>8){put_short(a,a.bi_buf)}else{if(a.bi_valid>0){a.pending_buf[a.pending++]=a.bi_buf}}a.bi_buf=0;a.bi_valid=0}function copy_block(c,b,a,d){bi_windup(c);if(d){put_short(c,a);put_short(c,~a)}utils.arraySet(c.pending_buf,c.window,b,a,c.pending);c.pending+=a}function smaller(b,f,a,e){var d=f*2;var c=a*2;return(b[d]<b[c]||(b[d]===b[c]&&e[f]<=e[a]))}function pqdownheap(e,a,c){var b=e.heap[c];var d=c<<1;while(d<=e.heap_len){if(d<e.heap_len&&smaller(a,e.heap[d+1],e.heap[d],e.depth)){d++}if(smaller(a,b,e.heap[d],e.depth)){break}e.heap[c]=e.heap[d];c=d;d<<=1}e.heap[c]=b}function compress_block(b,h,e){var g;var d;var f=0;var c;var a;if(b.last_lit!==0){do{g=(b.pending_buf[b.d_buf+f*2]<<8)|(b.pending_buf[b.d_buf+f*2+1]);d=b.pending_buf[b.l_buf+f];f++;if(g===0){send_code(b,d,h)}else{c=_length_code[d];send_code(b,c+LITERALS+1,h);a=extra_lbits[c];if(a!==0){d-=base_length[c];send_bits(b,d,a)}g--;c=d_code(g);send_code(b,c,e);a=extra_dbits[c];if(a!==0){g-=base_dist[c];send_bits(b,g,a)}}}while(f<b.last_lit)}send_code(b,END_BLOCK,h)}function build_tree(i,f){var j=f.dyn_tree;var h=f.stat_desc.static_tree;var c=f.stat_desc.has_stree;var a=f.stat_desc.elems;var b,e;var g=-1;var d;i.heap_len=0;i.heap_max=HEAP_SIZE;for(b=0;b<a;b++){if(j[b*2]!==0){i.heap[++i.heap_len]=g=b;i.depth[b]=0}else{j[b*2+1]=0}}while(i.heap_len<2){d=i.heap[++i.heap_len]=(g<2?++g:0);j[d*2]=1;i.depth[d]=0;i.opt_len--;if(c){i.static_len-=h[d*2+1]}}f.max_code=g;for(b=(i.heap_len>>1);b>=1;b--){pqdownheap(i,j,b)}d=a;do{b=i.heap[1];i.heap[1]=i.heap[i.heap_len--];pqdownheap(i,j,1);e=i.heap[1];i.heap[--i.heap_max]=b;i.heap[--i.heap_max]=e;j[d*2]=j[b*2]+j[e*2];i.depth[d]=(i.depth[b]>=i.depth[e]?i.depth[b]:i.depth[e])+1;j[b*2+1]=j[e*2+1]=d;i.heap[1]=d++;pqdownheap(i,j,1)}while(i.heap_len>=2);i.heap[--i.heap_max]=i.heap[1];gen_bitlen(i,f);gen_codes(j,g,i.bl_count)}function scan_tree(i,j,h){var b;var f=-1;var a;var d=j[0*2+1];var e=0;var c=7;var g=4;if(d===0){c=138;g=3}j[(h+1)*2+1]=65535;for(b=0;b<=h;b++){a=d;d=j[(b+1)*2+1];if(++e<c&&a===d){continue}else{if(e<g){i.bl_tree[a*2]+=e}else{if(a!==0){if(a!==f){i.bl_tree[a*2]++}i.bl_tree[REP_3_6*2]++}else{if(e<=10){i.bl_tree[REPZ_3_10*2]++}else{i.bl_tree[REPZ_11_138*2]++}}}}e=0;f=a;if(d===0){c=138;g=3}else{if(a===d){c=6;g=3}else{c=7;g=4}}}}function send_tree(i,j,h){var b;var f=-1;var a;var d=j[0*2+1];var e=0;var c=7;var g=4;if(d===0){c=138;g=3}for(b=0;b<=h;b++){a=d;d=j[(b+1)*2+1];if(++e<c&&a===d){continue}else{if(e<g){do{send_code(i,a,i.bl_tree)}while(--e!==0)}else{if(a!==0){if(a!==f){send_code(i,a,i.bl_tree);e--}send_code(i,REP_3_6,i.bl_tree);send_bits(i,e-3,2)}else{if(e<=10){send_code(i,REPZ_3_10,i.bl_tree);send_bits(i,e-3,3)}else{send_code(i,REPZ_11_138,i.bl_tree);send_bits(i,e-11,7)}}}}e=0;f=a;if(d===0){c=138;g=3}else{if(a===d){c=6;g=3}else{c=7;g=4}}}}function build_bl_tree(b){var a;scan_tree(b,b.dyn_ltree,b.l_desc.max_code);scan_tree(b,b.dyn_dtree,b.d_desc.max_code);build_tree(b,b.bl_desc);for(a=BL_CODES-1;a>=3;a--){if(b.bl_tree[bl_order[a]*2+1]!==0){break}}b.opt_len+=3*(a+1)+5+5+4;return a}function send_all_trees(b,c,a,d){var e;send_bits(b,c-257,5);send_bits(b,a-1,5);send_bits(b,d-4,4);for(e=0;e<d;e++){send_bits(b,b.bl_tree[bl_order[e]*2+1],3)}send_tree(b,b.dyn_ltree,c-1);send_tree(b,b.dyn_dtree,a-1)}function detect_data_type(b){var a=4093624447;var c;for(c=0;c<=31;c++,a>>>=1){if((a&1)&&(b.dyn_ltree[c*2]!==0)){return Z_BINARY}}if(b.dyn_ltree[9*2]!==0||b.dyn_ltree[10*2]!==0||b.dyn_ltree[13*2]!==0){return Z_TEXT}for(c=32;c<LITERALS;c++){if(b.dyn_ltree[c*2]!==0){return Z_TEXT}}return Z_BINARY}var static_init_done=false;function _tr_init(a){if(!static_init_done){tr_static_init();static_init_done=true}a.l_desc=new TreeDesc(a.dyn_ltree,static_l_desc);a.d_desc=new TreeDesc(a.dyn_dtree,static_d_desc);a.bl_desc=new TreeDesc(a.bl_tree,static_bl_desc);a.bi_buf=0;a.bi_valid=0;init_block(a)}function _tr_stored_block(c,a,b,d){send_bits(c,(STORED_BLOCK<<1)+(d?1:0),3);copy_block(c,a,b,true)}function _tr_align(a){send_bits(a,STATIC_TREES<<1,3);send_code(a,END_BLOCK,static_ltree);bi_flush(a)}function _tr_flush_block(f,c,e,g){var b,a;var d=0;if(f.level>0){if(f.strm.data_type===Z_UNKNOWN){f.strm.data_type=detect_data_type(f)}build_tree(f,f.l_desc);build_tree(f,f.d_desc);d=build_bl_tree(f);b=(f.opt_len+3+7)>>>3;a=(f.static_len+3+7)>>>3;if(a<=b){b=a}}else{b=a=e+5}if((e+4<=b)&&(c!==-1)){_tr_stored_block(f,c,e,g)}else{if(f.strategy===Z_FIXED||a===b){send_bits(f,(STATIC_TREES<<1)+(g?1:0),3);compress_block(f,static_ltree,static_dtree)}else{send_bits(f,(DYN_TREES<<1)+(g?1:0),3);send_all_trees(f,f.l_desc.max_code+1,f.d_desc.max_code+1,d+1);compress_block(f,f.dyn_ltree,f.dyn_dtree)}}init_block(f);if(g){bi_windup(f)}}function _tr_tally(a,c,b){a.pending_buf[a.d_buf+a.last_lit*2]=(c>>>8)&255;a.pending_buf[a.d_buf+a.last_lit*2+1]=c&255;a.pending_buf[a.l_buf+a.last_lit]=b&255;a.last_lit++;if(c===0){a.dyn_ltree[b*2]++}else{a.matches++;c--;a.dyn_ltree[(_length_code[b]+LITERALS+1)*2]++;a.dyn_dtree[d_code(c)*2]++}return(a.last_lit===a.lit_bufsize-1)}exports._tr_init=_tr_init;exports._tr_stored_block=_tr_stored_block;exports._tr_flush_block=_tr_flush_block;exports._tr_tally=_tr_tally;exports._tr_align=_tr_align;