"use strict";module.exports=function generate_multipleOf(k,c,d){var j=" ";var i=k.level;var n=k.dataLevel;var o=k.schema[c];var e=k.schemaPath+k.util.getProperty(c);var b=k.errSchemaPath+"/"+c;var f=!k.opts.allErrors;var h="data"+(n||"");var l=k.opts.$data&&o&&o.$data,m;if(l){j+=" var schema"+(i)+" = "+(k.util.getData(o.$data,n,k.dataPathArr))+"; ";m="schema"+i}else{m=o}j+="var division"+(i)+";if (";if(l){j+=" "+(m)+" !== undefined && ( typeof "+(m)+" != 'number' || "}j+=" (division"+(i)+" = "+(h)+" / "+(m)+", ";if(k.opts.multipleOfPrecision){j+=" Math.abs(Math.round(division"+(i)+") - division"+(i)+") > 1e-"+(k.opts.multipleOfPrecision)+" "}else{j+=" division"+(i)+" !== parseInt(division"+(i)+") "}j+=" ) ";if(l){j+="  )  "}j+=" ) {   ";var a=a||[];a.push(j);j="";if(k.createErrors!==false){j+=" { keyword: '"+("multipleOf")+"' , dataPath: (dataPath || '') + "+(k.errorPath)+" , schemaPath: "+(k.util.toQuotedString(b))+" , params: { multipleOf: "+(m)+" } ";if(k.opts.messages!==false){j+=" , message: 'should be multiple of ";if(l){j+="' + "+(m)}else{j+=""+(m)+"'"}}if(k.opts.verbose){j+=" , schema:  ";if(l){j+="validate.schema"+(e)}else{j+=""+(o)}j+="         , parentSchema: validate.schema"+(k.schemaPath)+" , data: "+(h)+" "}j+=" } "}else{j+=" {} "}var g=j;j=a.pop();if(!k.compositeRule&&f){if(k.async){j+=" throw new ValidationError(["+(g)+"]); "}else{j+=" validate.errors = ["+(g)+"]; return false; "}}else{j+=" var err = "+(g)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}j+="} ";if(f){j+=" else { "}return j};