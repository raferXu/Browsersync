"use strict";module.exports=function generate_enum(h,k,c){var o=" ";var r=h.level;var i=h.dataLevel;var p=h.schema[k];var g=h.schemaPath+h.util.getProperty(k);var l=h.errSchemaPath+"/"+k;var j=!h.opts.allErrors;var e="data"+(i||"");var f="valid"+r;var d=h.opts.$data&&p&&p.$data,m;if(d){o+=" var schema"+(r)+" = "+(h.util.getData(p.$data,i,h.dataPathArr))+"; ";m="schema"+r}else{m=p}var b="i"+r,q="schema"+r;if(!d){o+=" var "+(q)+" = validate.schema"+(g)+";"}o+="var "+(f)+";";if(d){o+=" if (schema"+(r)+" === undefined) "+(f)+" = true; else if (!Array.isArray(schema"+(r)+")) "+(f)+" = false; else {"}o+=""+(f)+" = false;for (var "+(b)+"=0; "+(b)+"<"+(q)+".length; "+(b)+"++) if (equal("+(e)+", "+(q)+"["+(b)+"])) { "+(f)+" = true; break; }";if(d){o+="  }  "}o+=" if (!"+(f)+") {   ";var n=n||[];n.push(o);o="";if(h.createErrors!==false){o+=" { keyword: '"+("enum")+"' , dataPath: (dataPath || '') + "+(h.errorPath)+" , schemaPath: "+(h.util.toQuotedString(l))+" , params: { allowedValues: schema"+(r)+" } ";if(h.opts.messages!==false){o+=" , message: 'should be equal to one of the allowed values' "}if(h.opts.verbose){o+=" , schema: validate.schema"+(g)+" , parentSchema: validate.schema"+(h.schemaPath)+" , data: "+(e)+" "}o+=" } "}else{o+=" {} "}var a=o;o=n.pop();if(!h.compositeRule&&j){if(h.async){o+=" throw new ValidationError(["+(a)+"]); "}else{o+=" validate.errors = ["+(a)+"]; return false; "}}else{o+=" var err = "+(a)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}o+=" }";if(j){o+=" else { "}return o};