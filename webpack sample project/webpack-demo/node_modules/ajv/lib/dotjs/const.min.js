"use strict";module.exports=function generate_const(k,c,d){var j=" ";var i=k.level;var n=k.dataLevel;var o=k.schema[c];var e=k.schemaPath+k.util.getProperty(c);var b=k.errSchemaPath+"/"+c;var f=!k.opts.allErrors;var h="data"+(n||"");var p="valid"+i;var l=k.opts.$data&&o&&o.$data,m;if(l){j+=" var schema"+(i)+" = "+(k.util.getData(o.$data,n,k.dataPathArr))+"; ";m="schema"+i}else{m=o}if(!l){j+=" var schema"+(i)+" = validate.schema"+(e)+";"}j+="var "+(p)+" = equal("+(h)+", schema"+(i)+"); if (!"+(p)+") {   ";var a=a||[];a.push(j);j="";if(k.createErrors!==false){j+=" { keyword: '"+("const")+"' , dataPath: (dataPath || '') + "+(k.errorPath)+" , schemaPath: "+(k.util.toQuotedString(b))+" , params: {} ";if(k.opts.messages!==false){j+=" , message: 'should be equal to constant' "}if(k.opts.verbose){j+=" , schema: validate.schema"+(e)+" , parentSchema: validate.schema"+(k.schemaPath)+" , data: "+(h)+" "}j+=" } "}else{j+=" {} "}var g=j;j=a.pop();if(!k.compositeRule&&f){if(k.async){j+=" throw new ValidationError(["+(g)+"]); "}else{j+=" validate.errors = ["+(g)+"]; return false; "}}else{j+=" var err = "+(g)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}j+=" }";if(f){j+=" else { "}return j};