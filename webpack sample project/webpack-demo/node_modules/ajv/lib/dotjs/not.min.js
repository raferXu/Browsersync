"use strict";module.exports=function generate_not(f,i,b){var o=" ";var r=f.level;var g=f.dataLevel;var p=f.schema[i];var e=f.schemaPath+f.util.getProperty(i);var j=f.errSchemaPath+"/"+i;var h=!f.opts.allErrors;var c="data"+(g||"");var m="errs__"+r;var d=f.util.copy(f);d.level++;var q="valid"+d.level;if(f.util.schemaHasRules(p,f.RULES.all)){d.schema=p;d.schemaPath=e;d.errSchemaPath=j;o+=" var "+(m)+" = errors;  ";var k=f.compositeRule;f.compositeRule=d.compositeRule=true;d.createErrors=false;var l;if(d.opts.allErrors){l=d.opts.allErrors;d.opts.allErrors=false}o+=" "+(f.validate(d))+" ";d.createErrors=true;if(l){d.opts.allErrors=l}f.compositeRule=d.compositeRule=k;o+=" if ("+(q)+") {   ";var n=n||[];n.push(o);o="";if(f.createErrors!==false){o+=" { keyword: '"+("not")+"' , dataPath: (dataPath || '') + "+(f.errorPath)+" , schemaPath: "+(f.util.toQuotedString(j))+" , params: {} ";if(f.opts.messages!==false){o+=" , message: 'should NOT be valid' "}if(f.opts.verbose){o+=" , schema: validate.schema"+(e)+" , parentSchema: validate.schema"+(f.schemaPath)+" , data: "+(c)+" "}o+=" } "}else{o+=" {} "}var a=o;o=n.pop();if(!f.compositeRule&&h){if(f.async){o+=" throw new ValidationError(["+(a)+"]); "}else{o+=" validate.errors = ["+(a)+"]; return false; "}}else{o+=" var err = "+(a)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}o+=" } else {  errors = "+(m)+"; if (vErrors !== null) { if ("+(m)+") vErrors.length = "+(m)+"; else vErrors = null; } ";if(f.opts.allErrors){o+=" } "}}else{o+="  var err =   ";if(f.createErrors!==false){o+=" { keyword: '"+("not")+"' , dataPath: (dataPath || '') + "+(f.errorPath)+" , schemaPath: "+(f.util.toQuotedString(j))+" , params: {} ";if(f.opts.messages!==false){o+=" , message: 'should NOT be valid' "}if(f.opts.verbose){o+=" , schema: validate.schema"+(e)+" , parentSchema: validate.schema"+(f.schemaPath)+" , data: "+(c)+" "}o+=" } "}else{o+=" {} "}o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";if(h){o+=" if (false) { "}}return o};