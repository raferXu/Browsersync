"use strict";module.exports=function generate__limitItems(m,d,e){var l=" ";var k=m.level;var p=m.dataLevel;var q=m.schema[d];var f=m.schemaPath+m.util.getProperty(d);var c=m.errSchemaPath+"/"+d;var g=!m.opts.allErrors;var b;var i="data"+(p||"");var n=m.opts.$data&&q&&q.$data,o;if(n){l+=" var schema"+(k)+" = "+(m.util.getData(q.$data,p,m.dataPathArr))+"; ";o="schema"+k}else{o=q}var j=d=="maxItems"?">":"<";l+="if ( ";if(n){l+=" ("+(o)+" !== undefined && typeof "+(o)+" != 'number') || "}l+=" "+(i)+".length "+(j)+" "+(o)+") { ";var b=d;var a=a||[];a.push(l);l="";if(m.createErrors!==false){l+=" { keyword: '"+(b||"_limitItems")+"' , dataPath: (dataPath || '') + "+(m.errorPath)+" , schemaPath: "+(m.util.toQuotedString(c))+" , params: { limit: "+(o)+" } ";if(m.opts.messages!==false){l+=" , message: 'should NOT have ";if(d=="maxItems"){l+="more"}else{l+="less"}l+=" than ";if(n){l+="' + "+(o)+" + '"}else{l+=""+(q)}l+=" items' "}if(m.opts.verbose){l+=" , schema:  ";if(n){l+="validate.schema"+(f)}else{l+=""+(q)}l+="         , parentSchema: validate.schema"+(m.schemaPath)+" , data: "+(i)+" "}l+=" } "}else{l+=" {} "}var h=l;l=a.pop();if(!m.compositeRule&&g){if(m.async){l+=" throw new ValidationError(["+(h)+"]); "}else{l+=" validate.errors = ["+(h)+"]; return false; "}}else{l+=" var err = "+(h)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}l+="} ";if(g){l+=" else { "}return l};