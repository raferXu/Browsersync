"use strict";module.exports=function generate_format(g,k,b){var q=" ";var v=g.level;var h=g.dataLevel;var r=g.schema[k];var e=g.schemaPath+g.util.getProperty(k);var m=g.errSchemaPath+"/"+k;var i=!g.opts.allErrors;var d="data"+(h||"");if(g.opts.format===false){if(i){q+=" if (true) { "}return q}var c=g.opts.$data&&r&&r.$data,o;if(c){q+=" var schema"+(v)+" = "+(g.util.getData(r.$data,h,g.dataPathArr))+"; ";o="schema"+v}else{o=r}var f=g.opts.unknownFormats,s=Array.isArray(f);if(c){var u="format"+v,p="isObject"+v,j="formatType"+v;q+=" var "+(u)+" = formats["+(o)+"]; var "+(p)+" = typeof "+(u)+" == 'object' && !("+(u)+" instanceof RegExp) && "+(u)+".validate; var "+(j)+" = "+(p)+" && "+(u)+".type || 'string'; if ("+(p)+") { ";if(g.async){q+=" var async"+(v)+" = "+(u)+".async; "}q+=" "+(u)+" = "+(u)+".validate; } if (  ";if(c){q+=" ("+(o)+" !== undefined && typeof "+(o)+" != 'string') || "}q+=" (";if(f!="ignore"){q+=" ("+(o)+" && !"+(u)+" ";if(s){q+=" && self._opts.unknownFormats.indexOf("+(o)+") == -1 "}q+=") || "}q+=" ("+(u)+" && "+(j)+" == '"+(b)+"' && !(typeof "+(u)+" == 'function' ? ";if(g.async){q+=" (async"+(v)+" ? "+(g.yieldAwait)+" "+(u)+"("+(d)+") : "+(u)+"("+(d)+")) "}else{q+=" "+(u)+"("+(d)+") "}q+=" : "+(u)+".test("+(d)+"))))) {"}else{var u=g.formats[r];if(!u){if(f=="ignore"){console.warn('unknown format "'+r+'" ignored in schema at path "'+g.errSchemaPath+'"');if(i){q+=" if (true) { "}return q}else{if(s&&f.indexOf(r)>=0){if(i){q+=" if (true) { "}return q}else{throw new Error('unknown format "'+r+'" is used in schema at path "'+g.errSchemaPath+'"')}}}var p=typeof u=="object"&&!(u instanceof RegExp)&&u.validate;var j=p&&u.type||"string";if(p){var t=u.async===true;u=u.validate}if(j!=b){if(i){q+=" if (true) { "}return q}if(t){if(!g.async){throw new Error("async format in sync schema")}var l="formats"+g.util.getProperty(r)+".validate";q+=" if (!("+(g.yieldAwait)+" "+(l)+"("+(d)+"))) { "}else{q+=" if (! ";var l="formats"+g.util.getProperty(r);if(p){l+=".validate"}if(typeof u=="function"){q+=" "+(l)+"("+(d)+") "}else{q+=" "+(l)+".test("+(d)+") "}q+=") { "}}var n=n||[];n.push(q);q="";if(g.createErrors!==false){q+=" { keyword: '"+("format")+"' , dataPath: (dataPath || '') + "+(g.errorPath)+" , schemaPath: "+(g.util.toQuotedString(m))+" , params: { format:  ";if(c){q+=""+(o)}else{q+=""+(g.util.toQuotedString(r))}q+="  } ";if(g.opts.messages!==false){q+=" , message: 'should match format \"";if(c){q+="' + "+(o)+" + '"}else{q+=""+(g.util.escapeQuotes(r))}q+="\"' "}if(g.opts.verbose){q+=" , schema:  ";if(c){q+="validate.schema"+(e)}else{q+=""+(g.util.toQuotedString(r))}q+="         , parentSchema: validate.schema"+(g.schemaPath)+" , data: "+(d)+" "}q+=" } "}else{q+=" {} "}var a=q;q=n.pop();if(!g.compositeRule&&i){if(g.async){q+=" throw new ValidationError(["+(a)+"]); "}else{q+=" validate.errors = ["+(a)+"]; return false; "}}else{q+=" var err = "+(a)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}q+=" } ";if(i){q+=" else { "}return q};