var debug;var test=debug?function(){}:require("tap").test;var test_=!debug?function(){}:require("tap").test,path=require("path"),fs=require("fs"),util=require("util"),TransformStream=require("readable-stream").Transform,through=require("through2"),proxyquire=require("proxyquire"),streamapi=require("../stream-api"),readdirp=require(".."),root=path.join(__dirname,"bed"),totalDirs=6,totalFiles=12,ext1Files=4,ext2Files=3,ext3Files=2;function opts(c){var a={root:root};if(c){for(var b in c){a[b]=c[b]}}return a}function capture(){var a={entries:[],errors:[],ended:false},b=new TransformStream({objectMode:true});b._transform=function(e,d,c){a.entries.push(e);c()};b._flush=function(c){a.ended=true;this.push(a);c()};return b}test("\nintegrated",function(a){a.test("\n# reading root without filter",function(b){b.plan(2);readdirp(opts()).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,totalFiles,"emits all files");b.ok(d.ended,"ends stream");b.end();c()}))});a.test('\n# normal: ["*.ext1", "*.ext3"]',function(b){b.plan(2);readdirp(opts({fileFilter:["*.ext1","*.ext3"]})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,ext1Files+ext3Files,"all ext1 and ext3 files");b.ok(d.ended,"ends stream");b.end();c()}))});a.test("\n# files only",function(b){b.plan(2);readdirp(opts({entryType:"files"})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,totalFiles,"returned files");b.ok(d.ended,"ends stream");b.end();c()}))});a.test("\n# directories only",function(b){b.plan(2);readdirp(opts({entryType:"directories"})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,totalDirs,"returned directories");b.ok(d.ended,"ends stream");b.end();c()}))});a.test("\n# both directories + files",function(b){b.plan(2);readdirp(opts({entryType:"both"})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,totalDirs+totalFiles,"returned everything");b.ok(d.ended,"ends stream");b.end();c()}))});a.test("\n# directory filter with directories only",function(b){b.plan(2);readdirp(opts({entryType:"directories",directoryFilter:["root_dir1","*dir1_subdir1"]})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,2,"two directories");b.ok(d.ended,"ends stream");b.end();c()}))});a.test("\n# directory and file filters with both entries",function(b){b.plan(2);readdirp(opts({entryType:"both",directoryFilter:["root_dir1","*dir1_subdir1"],fileFilter:["!*.ext1"]})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,6,"2 directories and 4 files");b.ok(d.ended,"ends stream");b.end();c()}))});a.test('\n# negated: ["!*.ext1", "!*.ext3"]',function(b){b.plan(2);readdirp(opts({fileFilter:["!*.ext1","!*.ext3"]})).on("error",function(c){b.fail("should not throw error",c)}).pipe(capture()).pipe(through.obj(function(d,e,c){b.equals(d.entries.length,totalFiles-ext1Files-ext3Files,"all but ext1 and ext3 files");b.ok(d.ended,"ends stream");b.end()}))});a.test("\n# no options given",function(b){b.plan(1);readdirp().on("error",function(c){b.similar(c.toString(),/Need to pass at least one argument/,"emits meaningful error");b.end()})});a.test('\n# mixed: ["*.ext1", "!*.ext3"]',function(b){b.plan(1);readdirp(opts({fileFilter:["*.ext1","!*.ext3"]})).on("error",function(c){b.similar(c.toString(),/Cannot mix negated with non negated glob filters/,"emits meaningful error");b.end()})})});test("\napi separately",function(a){a.test("\n# handleError",function(b){b.plan(1);var d=streamapi(),c=new Error("some file caused problems");d.stream.on("warn",function(e){b.equals(e,c,"warns with the handled error")});d.handleError(c)});a.test("\n# when stream is paused and then resumed",function(c){c.plan(6);var d=streamapi(),f=false,e=new Error("fatal!"),g=new Error("nonfatal!"),b="some data";d.stream.on("warn",function(h){c.equals(h,g,"emits the buffered warning");c.ok(f,"emits warning only after it was resumed")}).on("error",function(h){c.equals(h,e,"emits the buffered fatal error");c.ok(f,"emits errors only after it was resumed")}).on("data",function(h){c.equals(h,b,"emits the buffered data");c.ok(f,"emits data only after it was resumed")}).pause();d.processEntry(b);d.handleError(g);d.handleFatalError(e);setTimeout(function(){f=true;d.stream.resume()},1)});a.test("\n# when a stream is paused it stops walking the fs",function(c){var d=false,b=streamapi();b.processEntry=function(h){if(!d){c.notOk(true,"should not emit while paused")}c.ok(h,"emitted while resumed")}.bind(b.stream);function g(){return b}var f=proxyquire("../readdirp",{"./stream-api":g}),e=f(opts()).on("error",function(h){c.fail("should not throw error",h)}).on("end",function(){c.end()}).pause();setTimeout(function(){d=true;e.resume()},5)});a.test('\n# when a stream is destroyed, it emits "closed", but no longer emits "data", "warn" and "error"',function(c){var d=streamapi(),e=new Error("fatal!"),h=new Error("nonfatal!"),b="some data",f=0;c.plan(6);var g=d.stream.on("warn",function(i){c.ok(!g._destroyed,"emits warning until destroyed")}).on("error",function(i){c.ok(!g._destroyed,"emits errors until destroyed")}).on("data",function(i){c.ok(!g._destroyed,"emits data until destroyed")}).on("close",function(){c.ok(g._destroyed,"emits close when stream is destroyed")});d.processEntry(b);d.handleError(h);d.handleFatalError(e);setTimeout(function(){g.destroy();c.notOk(g.readable,"stream is no longer readable after it is destroyed");d.processEntry(b);d.handleError(h);d.handleFatalError(e);process.nextTick(function(){c.pass("emits no more data, warn or error events after it was destroyed");c.end()})},10)})});