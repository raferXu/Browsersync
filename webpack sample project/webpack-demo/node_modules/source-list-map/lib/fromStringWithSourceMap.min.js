"use strict";const base64VLQ=require("./base64-vlq");const SourceNode=require("./SourceNode");const CodeNode=require("./CodeNode");const SourceListMap=require("./SourceListMap");module.exports=function fromStringWithSourceMap(e,c){const a=c.sources;const h=c.sourcesContent;const g=c.mappings.split(";");const j=e.split("\n");const d=[];let currentNode=null;let currentLine=1;let currentSourceIdx=0;let currentSourceNodeLine;g.forEach(function(l,k){let line=j[k];if(typeof line==="undefined"){return}if(k!==j.length-1){line+="\n"}if(!l){return b(line)}l={value:0,rest:l};let lineAdded=false;while(l.rest){lineAdded=i(l,line,lineAdded)||lineAdded}if(!lineAdded){b(line)}});if(g.length<j.length){let idx=g.length;while(!j[idx].trim()&&idx<j.length-1){b(j[idx]+"\n");idx++}b(j.slice(idx).join("\n"))}return new SourceListMap(d);function i(m,l,o){if(m.rest&&m.rest[0]!==","){base64VLQ.decode(m.rest,m)}if(!m.rest){return false}if(m.rest[0]===","){m.rest=m.rest.substr(1);return false}base64VLQ.decode(m.rest,m);const k=m.value+currentSourceIdx;currentSourceIdx=k;let linePosition;if(m.rest&&m.rest[0]!==","){base64VLQ.decode(m.rest,m);linePosition=m.value+currentLine;currentLine=linePosition}else{linePosition=currentLine}if(m.rest){const n=m.rest.indexOf(",");m.rest=n===-1?"":m.rest.substr(n)}if(!o){f(l,a?a[k]:null,h?h[k]:null,linePosition);return true}}function b(k){if(currentNode&&currentNode instanceof CodeNode){currentNode.addGeneratedCode(k)}else{if(currentNode&&currentNode instanceof SourceNode&&!k.trim()){currentNode.addGeneratedCode(k);currentSourceNodeLine++}else{currentNode=new CodeNode(k);d.push(currentNode)}}}function f(n,m,l,k){if(currentNode&&currentNode instanceof SourceNode&&currentNode.source===m&&currentSourceNodeLine===k){currentNode.addGeneratedCode(n);currentSourceNodeLine++}else{currentNode=new SourceNode(n,m,l,k);currentSourceNodeLine=k+1;d.push(currentNode)}}};