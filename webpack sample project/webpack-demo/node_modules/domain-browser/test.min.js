"use strict";const events=require("events");const equal=require("assert-helpers").equal;const joe=require("joe");const domain=require("./");joe.describe("domain-browser",function(b,a){a("should work on throws",function(c){const e=domain.create();e.on("error",function(d){equal(d&&d.message,"a thrown error","error message");c()});e.run(function(){throw new Error("a thrown error")})});a("should be able to add emitters",function(c){const f=domain.create();const e=new events.EventEmitter();f.add(e);f.on("error",function(d){equal(d&&d.message,"an emitted error","error message");c()});e.emit("error",new Error("an emitted error"))});a("should be able to remove emitters",function(c){const e=new events.EventEmitter();const f=domain.create();let domainGotError=falsef.add(e);f.on("error",function(d){domainGotError=true});e.on("error",function(d){equal(d&&d.message,"This error should not go to the domain","error message");setTimeout(function(){equal(domainGotError,false,"no domain error");c()},0)});f.remove(e);e.emit("error",new Error("This error should not go to the domain"))});a("bind should work",function(c){const e=domain.create();e.on("error",function(d){equal(d&&d.message,"a thrown error","error message");c()});e.bind(function(g,f,d){equal(g&&g.message,"a passed error","error message");equal(f,2,"value of a");equal(d,3,"value of b");throw new Error("a thrown error")})(new Error("a passed error"),2,3)});a("intercept should work",function(c){const e=domain.create();let count=0e.on("error",function(d){if(count===0){equal(d&&d.message,"a thrown error","error message")}else{if(count===1){equal(d&&d.message,"a passed error","error message");c()}}count++});e.intercept(function(f,d){equal(f,2,"value of a");equal(d,3,"value of b");throw new Error("a thrown error")})(null,2,3);e.intercept(function(f,d){throw new Error("should never reach here")})(new Error("a passed error"),2,3)})});