"use strict";const baseEncodeTables={26:"abcdefghijklmnopqrstuvwxyz",32:"123456789abcdefghjkmnpqrstuvwxyz",36:"0123456789abcdefghijklmnopqrstuvwxyz",49:"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",52:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",58:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",62:"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",64:"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"};function encodeBufferToBase(a,e){const c=baseEncodeTables[e];if(!c){throw new Error("Unknown encoding base"+e)}const f=a.length;const d=require("big.js");d.RM=d.DP=0;let b=new d(0);for(let i=f-1;i>=0;i--){b=b.times(256).plus(a[i])}let output="";while(b.gt(0)){output=c[b.mod(e)]+output;b=b.div(e)}d.DP=20;d.RM=1;return output}function getHashDigest(d,c,e,a){c=c||"md5";a=a||9999;const f=require("crypto").createHash(c);f.update(d);if(e==="base26"||e==="base32"||e==="base36"||e==="base49"||e==="base52"||e==="base58"||e==="base62"||e==="base64"){return encodeBufferToBase(f.digest(),e.substr(4)).substr(0,a)}else{return f.digest(e||"hex").substr(0,a)}}module.exports=getHashDigest;