var BN=require("bn.js");var EC=require("elliptic").ec;var parseKeys=require("parse-asn1");var curves=require("./curves.json");function verify(l,g,k,h,m){var e=parseKeys(k);if(e.type==="ec"){if(h!=="ecdsa"&&h!=="ecdsa/rsa"){throw new Error("wrong public key type")}return ecVerify(l,g,e)}else{if(e.type==="dsa"){if(h!=="dsa"){throw new Error("wrong public key type")}return dsaVerify(l,g,e)}else{if(h!=="rsa"&&h!=="ecdsa/rsa"){throw new Error("wrong public key type")}}}g=Buffer.concat([m,g]);var j=e.modulus.byteLength();var a=[1];var c=0;while(g.length+a.length+2<j){a.push(255);c++}a.push(0);var f=-1;while(++f<g.length){a.push(g[f])}a=new Buffer(a);var b=BN.mont(e.modulus);l=new BN(l).toRed(b);l=l.redPow(new BN(e.publicExponent));l=new Buffer(l.fromRed().toArray());var d=c<8?1:0;j=Math.min(l.length,a.length);if(l.length!==a.length){d=1}f=-1;while(++f<j){d|=l[f]^a[f]}return d===0}function ecVerify(f,d,c){var a=curves[c.data.algorithm.curve.join(".")];if(!a){throw new Error("unknown curve "+c.data.algorithm.curve.join("."))}var e=new EC(a);var b=c.data.subjectPrivateKey.data;return e.verify(d,f,b)}function dsaVerify(n,f,e){var c=e.data.p;var b=e.data.q;var i=e.data.g;var j=e.data.pub_key;var h=parseKeys.signature.decode(n,"der");var m=h.s;var a=h.r;checkValue(m,b);checkValue(a,b);var d=BN.mont(c);var k=m.invm(b);var l=i.toRed(d).redPow(new BN(f).mul(k).mod(b)).fromRed().mul(j.toRed(d).redPow(a.mul(k).mod(b)).fromRed()).mod(c).mod(b);return l.cmp(a)===0}function checkValue(a,c){if(a.cmpn(0)<=0){throw new Error("invalid sig")}if(a.cmp(c)>=c){throw new Error("invalid sig")}}module.exports=verify;