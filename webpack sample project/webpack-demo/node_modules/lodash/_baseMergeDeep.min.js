var assignMergeValue=require("./_assignMergeValue"),cloneBuffer=require("./_cloneBuffer"),cloneTypedArray=require("./_cloneTypedArray"),copyArray=require("./_copyArray"),initCloneObject=require("./_initCloneObject"),isArguments=require("./isArguments"),isArray=require("./isArray"),isArrayLikeObject=require("./isArrayLikeObject"),isBuffer=require("./isBuffer"),isFunction=require("./isFunction"),isObject=require("./isObject"),isPlainObject=require("./isPlainObject"),isTypedArray=require("./isTypedArray"),toPlainObject=require("./toPlainObject");function baseMergeDeep(h,a,o,n,f,g,m){var j=h[o],b=a[o],l=m.get(b);if(l){assignMergeValue(h,o,l);return}var d=g?g(j,b,(o+""),h,a,m):undefined;var e=d===undefined;if(e){var i=isArray(b),k=!i&&isBuffer(b),c=!i&&!k&&isTypedArray(b);d=b;if(i||k||c){if(isArray(j)){d=j}else{if(isArrayLikeObject(j)){d=copyArray(j)}else{if(k){e=false;d=cloneBuffer(b,true)}else{if(c){e=false;d=cloneTypedArray(b,true)}else{d=[]}}}}}else{if(isPlainObject(b)||isArguments(b)){d=j;if(isArguments(j)){d=toPlainObject(j)}else{if(!isObject(j)||(n&&isFunction(j))){d=initCloneObject(b)}}}else{e=false}}}if(e){m.set(b,d);f(d,b,n,g,m);m["delete"](b)}assignMergeValue(h,o,d)}module.exports=baseMergeDeep;