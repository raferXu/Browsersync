require("chai").should();var cliui=require("../");describe("cliui",function(){describe("div",function(){it("wraps text at 'width' if a single column is given",function(){var a=cliui({width:10});a.div("i am a string that should be wrapped");a.toString().split("\n").forEach(function(b){b.length.should.be.lte(10)})});it("evenly divides text across columns if multiple columns are given",function(){var b=cliui({width:40});b.div({text:"i am a string that should be wrapped",width:15},"i am a second string that should be wrapped","i am a third string that should be wrapped");b.toString().split("\n").forEach(function(c){c.length.should.be.lte(40)});var a=["i am a string  i am a      i am a third","that should be second      string that","wrapped        string that should be","               should be   wrapped","               wrapped"];b.toString().split("\n").should.eql(a)});it("allows for a blank row to be appended",function(){var b=cliui({width:40});b.div();var a=[""];b.toString().split("\n").should.eql(a)})});describe("_columnWidths",function(){it("uses same width for each column by default",function(){var b=cliui({width:40}),a=b._columnWidths([{},{},{}]);a[0].should.equal(13);a[1].should.equal(13);a[2].should.equal(13)});it("divides width over remaining columns if first column has width specified",function(){var b=cliui({width:40}),a=b._columnWidths([{width:20},{},{}]);a[0].should.equal(20);a[1].should.equal(10);a[2].should.equal(10)});it("divides width over remaining columns if middle column has width specified",function(){var b=cliui({width:40}),a=b._columnWidths([{},{width:10},{}]);a[0].should.equal(15);a[1].should.equal(10);a[2].should.equal(15)});it("keeps track of remaining width if multiple columns have width specified",function(){var b=cliui({width:40}),a=b._columnWidths([{width:20},{width:12},{}]);a[0].should.equal(20);a[1].should.equal(12);a[2].should.equal(8)});it("uses a sane default if impossible widths are specified",function(){var b=cliui({width:40}),a=b._columnWidths([{width:30},{width:30},{padding:[0,2,0,1]}]);a[0].should.equal(30);a[1].should.equal(30);a[2].should.equal(4)})});describe("alignment",function(){it("allows a column to be right aligned",function(){var b=cliui({width:40});b.div("i am a string",{text:"i am a second string",align:"right"},"i am a third string that should be wrapped");var a=["i am a stringi am a secondi am a third","                    stringstring that","                          should be","                          wrapped"];b.toString().split("\n").should.eql(a)});it("allows a column to be center aligned",function(){var b=cliui({width:60});b.div("i am a string",{text:"i am a second string",align:"center",padding:[0,2,0,2]},"i am a third string that should be wrapped");var a=["i am a string          i am a second       i am a third string","                           string          that should be","                                           wrapped"];b.toString().split("\n").should.eql(a)})});describe("padding",function(){it("handles left/right padding",function(){var b=cliui({width:40});b.div({text:"i have padding on my left",padding:[0,0,0,4]},{text:"i have padding on my right",padding:[0,2,0,0],align:"center"},{text:"i have no padding",padding:[0,0,0,0]});var a=["    i have     i have      i have no","    padding  padding on    padding","    on my     my right","    left"];b.toString().split("\n").should.eql(a)});it("handles top/bottom padding",function(){var b=cliui({width:40});b.div("i am a string",{text:"i am a second string",padding:[2,0,0,0]},{text:"i am a third string that should be wrapped",padding:[0,0,1,0]});var a=["i am a string             i am a third","                          string that","             i am a secondshould be","             string       wrapped",""];b.toString().split("\n").should.eql(a)})});describe("wrap",function(){it("allows wordwrap to be disabled",function(){var a=cliui({wrap:false});a.div({text:"i am a string",padding:[0,1,0,0]},{text:"i am a second string",padding:[0,2,0,0]},{text:"i am a third string that should not be wrapped",padding:[0,0,0,2]});a.toString().should.equal("i am a string i am a second string    i am a third string that should not be wrapped")})});describe("span",function(){it("appends the next row to the end of the prior row if it fits",function(){var b=cliui({width:40});b.span({text:"i am a string that will be wrapped",width:30});b.div({text:" [required] [default: 99]",align:"right"});var a=["i am a string that will be","wrapped         [required] [default: 99]"];b.toString().split("\n").should.eql(a)});it("does not append the string if it does not fit on the prior row",function(){var b=cliui({width:40});b.span({text:"i am a string that will be wrapped",width:30});b.div({text:"i am a second row",align:"left"});var a=["i am a string that will be","wrapped","i am a second row"];b.toString().split("\n").should.eql(a)});it("always appends text to prior span if wrap is disabled",function(){var b=cliui({wrap:false,width:40});b.span({text:"i am a string that will be wrapped",width:30});b.div({text:"i am a second row",align:"left",padding:[0,0,0,3]});b.div("a third line");var a=["i am a string that will be wrapped   i am a second row","a third line"];b.toString().split("\n").should.eql(a)})});describe("layoutDSL",function(){it("turns tab into multiple columns",function(){var b=cliui({width:60});b.div("  <regex>  \tmy awesome regex\n  <my second thing>  \tanother row\t  a third column");var a=["  <regex>            my awesome regex","  <my second thing>  another row          a third column"];b.toString().split("\n").should.eql(a)});it("turns newline into multiple rows",function(){var b=cliui({width:40});b.div("Usage: $0\n  <regex>\t  my awesome regex\n  <glob>\t  my awesome glob\t  [required]");var a=["Usage: $0","  <regex>  my awesome regex","  <glob>   my awesome     [required]","           glob"];b.toString().split("\n").should.eql(a)});it("does not apply DSL if wrap is false",function(){var a=cliui({width:40,wrap:false});a.div("Usage: $0\ttwo\tthree");a.toString().should.eql("Usage: $0\ttwo\tthree")})})});