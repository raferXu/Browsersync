"use strict";var Transform=require("stream").Transform;var inherits=require("inherits");function HashBase(a){Transform.call(this);this._block=new Buffer(a);this._blockSize=a;this._blockOffset=0;this._length=[0,0,0,0];this._finalized=false}inherits(HashBase,Transform);HashBase.prototype._transform=function(b,d,e){var a=null;try{if(d!=="buffer"){b=new Buffer(b,d)}this.update(b)}catch(c){a=c}e(a)};HashBase.prototype._flush=function(c){var a=null;try{this.push(this._digest())}catch(b){a=b}c(a)};HashBase.prototype.update=function(d,c){if(!Buffer.isBuffer(d)&&typeof d!=="string"){throw new TypeError("Data must be a string or a buffer")}if(this._finalized){throw new Error("Digest already called")}if(!Buffer.isBuffer(d)){d=new Buffer(d,c||"binary")}var g=this._block;var f=0;while(this._blockOffset+d.length-f>=this._blockSize){for(var b=this._blockOffset;b<this._blockSize;){g[b++]=d[f++]}this._update();this._blockOffset=0}while(f<d.length){g[this._blockOffset++]=d[f++]}for(var a=0,e=d.length*8;e>0;++a){this._length[a]+=e;e=(this._length[a]/4294967296)|0;if(e>0){this._length[a]-=4294967296*e}}return this};HashBase.prototype._update=function(a){throw new Error("_update is not implemented")};HashBase.prototype.digest=function(a){if(this._finalized){throw new Error("Digest already called")}this._finalized=true;var b=this._digest();if(a!==undefined){b=b.toString(a)}return b};HashBase.prototype._digest=function(){throw new Error("_digest is not implemented")};module.exports=HashBase;