"use strict";var BN=require("bn.js");var elliptic=require("../../elliptic");var utils=elliptic.utils;var assert=utils.assert;function KeyPair(b,a){this.ec=b;this.priv=null;this.pub=null;if(a.priv){this._importPrivate(a.priv,a.privEnc)}if(a.pub){this._importPublic(a.pub,a.pubEnc)}}module.exports=KeyPair;KeyPair.fromPublic=function fromPublic(b,c,a){if(c instanceof KeyPair){return c}return new KeyPair(b,{pub:c,pubEnc:a})};KeyPair.fromPrivate=function fromPrivate(c,b,a){if(b instanceof KeyPair){return b}return new KeyPair(c,{priv:b,privEnc:a})};KeyPair.prototype.validate=function validate(){var a=this.getPublic();if(a.isInfinity()){return{result:false,reason:"Invalid public key"}}if(!a.validate()){return{result:false,reason:"Public key is not a point"}}if(!a.mul(this.ec.curve.n).isInfinity()){return{result:false,reason:"Public key * N != O"}}return{result:true,reason:null}};KeyPair.prototype.getPublic=function getPublic(b,a){if(typeof b==="string"){a=b;b=null}if(!this.pub){this.pub=this.ec.g.mul(this.priv)}if(!a){return this.pub}return this.pub.encode(a,b)};KeyPair.prototype.getPrivate=function getPrivate(a){if(a==="hex"){return this.priv.toString(16,2)}else{return this.priv}};KeyPair.prototype._importPrivate=function _importPrivate(b,a){this.priv=new BN(b,a||16);this.priv=this.priv.umod(this.ec.curve.n)};KeyPair.prototype._importPublic=function _importPublic(b,a){if(b.x||b.y){if(this.ec.curve.type==="mont"){assert(b.x,"Need x coordinate")}else{if(this.ec.curve.type==="short"||this.ec.curve.type==="edwards"){assert(b.x&&b.y,"Need both x and y coordinate")}}this.pub=this.ec.curve.point(b.x,b.y);return}this.pub=this.ec.curve.decodePoint(b,a)};KeyPair.prototype.derive=function derive(a){return a.mul(this.priv).getX()};KeyPair.prototype.sign=function sign(c,a,b){return this.ec.sign(c,this,a,b)};KeyPair.prototype.verify=function verify(b,a){return this.ec.verify(b,a,this)};KeyPair.prototype.inspect=function inspect(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};