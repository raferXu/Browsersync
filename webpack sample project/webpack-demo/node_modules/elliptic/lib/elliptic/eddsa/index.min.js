"use strict";var hash=require("hash.js");var elliptic=require("../../elliptic");var utils=elliptic.utils;var assert=utils.assert;var parseBytes=utils.parseBytes;var KeyPair=require("./key");var Signature=require("./signature");function EDDSA(a){assert(a==="ed25519","only tested with ed25519 so far");if(!(this instanceof EDDSA)){return new EDDSA(a)}var a=elliptic.curves[a].curve;this.curve=a;this.g=a.g;this.g.precompute(a.n.bitLength()+1);this.pointClass=a.point().constructor;this.encodingLength=Math.ceil(a.n.bitLength()/8);this.hash=hash.sha512}module.exports=EDDSA;EDDSA.prototype.sign=function sign(g,a){g=parseBytes(g);var d=this.keyFromSecret(a);var f=this.hashInt(d.messagePrefix(),g);var e=this.g.mul(f);var h=this.encodePoint(e);var b=this.hashInt(h,d.pubBytes(),g).mul(d.priv());var c=f.add(b).umod(this.curve.n);return this.makeSignature({R:e,S:c,Rencoded:h})};EDDSA.prototype.verify=function verify(f,g,e){f=parseBytes(f);g=this.makeSignature(g);var a=this.keyFromPublic(e);var b=this.hashInt(g.Rencoded(),a.pubBytes(),f);var d=this.g.mul(g.S());var c=g.R().add(a.pub().mul(b));return c.eq(d)};EDDSA.prototype.hashInt=function hashInt(){var b=this.hash();for(var a=0;a<arguments.length;a++){b.update(arguments[a])}return utils.intFromLE(b.digest()).umod(this.curve.n)};EDDSA.prototype.keyFromPublic=function keyFromPublic(a){return KeyPair.fromPublic(this,a)};EDDSA.prototype.keyFromSecret=function keyFromSecret(a){return KeyPair.fromSecret(this,a)};EDDSA.prototype.makeSignature=function makeSignature(a){if(a instanceof Signature){return a}return new Signature(this,a)};EDDSA.prototype.encodePoint=function encodePoint(a){var b=a.getY().toArray("le",this.encodingLength);b[this.encodingLength-1]|=a.getX().isOdd()?128:0;return b};EDDSA.prototype.decodePoint=function decodePoint(c){c=utils.parseBytes(c);var b=c.length-1;var d=c.slice(0,b).concat(c[b]&~128);var a=(c[b]&128)!==0;var e=utils.intFromLE(d);return this.curve.pointFromY(e,a)};EDDSA.prototype.encodeInt=function encodeInt(a){return a.toArray("le",this.encodingLength)};EDDSA.prototype.decodeInt=function decodeInt(a){return utils.intFromLE(a)};EDDSA.prototype.isPoint=function isPoint(a){return a instanceof this.pointClass};