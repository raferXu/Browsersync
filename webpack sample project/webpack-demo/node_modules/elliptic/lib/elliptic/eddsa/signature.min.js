"use strict";var BN=require("bn.js");var elliptic=require("../../elliptic");var utils=elliptic.utils;var assert=utils.assert;var cachedProperty=utils.cachedProperty;var parseBytes=utils.parseBytes;function Signature(a,b){this.eddsa=a;if(typeof b!=="object"){b=parseBytes(b)}if(Array.isArray(b)){b={R:b.slice(0,a.encodingLength),S:b.slice(a.encodingLength)}}assert(b.R&&b.S,"Signature without R or S");if(a.isPoint(b.R)){this._R=b.R}if(b.S instanceof BN){this._S=b.S}this._Rencoded=Array.isArray(b.R)?b.R:b.Rencoded;this._Sencoded=Array.isArray(b.S)?b.S:b.Sencoded}cachedProperty(Signature,"S",function S(){return this.eddsa.decodeInt(this.Sencoded())});cachedProperty(Signature,"R",function R(){return this.eddsa.decodePoint(this.Rencoded())});cachedProperty(Signature,"Rencoded",function Rencoded(){return this.eddsa.encodePoint(this.R())});cachedProperty(Signature,"Sencoded",function Sencoded(){return this.eddsa.encodeInt(this.S())});Signature.prototype.toBytes=function toBytes(){return this.Rencoded().concat(this.Sencoded())};Signature.prototype.toHex=function toHex(){return utils.encode(this.toBytes(),"hex").toUpperCase()};module.exports=Signature;