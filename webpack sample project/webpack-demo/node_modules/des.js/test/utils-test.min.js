"use strict";var assert=require("assert");var des=require("../");var utils=des.utils;var fixtures=require("./fixtures");var bin=fixtures.bin;describe("utils",function(){describe("IP",function(){it("should permute properly",function(){var a=new Array(2);var c=[bin("00000001 00100011 01000101 01100111"),bin("10001001 10101011 11001101 11101111")];utils.ip(c[0],c[1],a,0);var b=[bin("11001100 00000000 11001100 11111111"),bin("11110000 10101010 11110000 10101010")];assert.deepEqual(a,b)});it("should rev-permute properly",function(){var a=new Array(2);var c=[bin("11001100 00000000 11001100 11111111"),bin("11110000 10101010 11110000 10101010")];utils.rip(c[0],c[1],a,0);var b=[bin("00000001 00100011 01000101 01100111"),bin("10001001 10101011 11001101 11101111")];assert.deepEqual(a,b)})});describe("PC1",function(){it("should permute properly",function(){var a=new Array(2);var c=[bin("00010011 00110100 01010111 01111001"),bin("10011011 10111100 11011111 11110001")];utils.pc1(c[0],c[1],a,0);var b=[bin("1111000 0110011 0010101 0101111"),bin("0101010 1011001 1001111 0001111")];assert.deepEqual(a,b)})});describe("r28shl",function(){it("should shl properly",function(){assert.equal(utils.r28shl(bin("1111000011001100101010101111"),1),bin("1110000110011001010101011111"));assert.equal(utils.r28shl(bin("0101010101100110011110001111"),1),bin("1010101011001100111100011110"));assert.equal(utils.r28shl(bin("1111000011001100101010101111"),4),bin("0000110011001010101011111111"));assert.equal(utils.r28shl(bin("0101010101100110011110001111"),4),bin("0101011001100111100011110101"))})});describe("PC2",function(){it("should permute properly",function(){var a=new Array(2);var c=[bin("1110000 1100110 0101010 1011111"),bin("1010101 0110011 0011110 0011110")];utils.pc2(c[0],c[1],a,0);var b=[bin("000110 110000 001011 101111"),bin("111111 000111 000001 110010")];assert.deepEqual(a,b)})});describe("readUInt32BE",function(){it("should read number properly",function(){var b=[222,173,190,239];var c=utils.readUInt32BE(b,0);assert.equal(c,3735928559)})});describe("writeUInt32BE",function(){it("should read number properly",function(){var b=[0,0,0,0];utils.writeUInt32BE(b,3735928559,0);var c=[222,173,190,239];assert.deepEqual(b,c)})});describe("expand",function(){it("should expand",function(){var a=[0,0];utils.expand(bin("1111 0000 1010 1010 1111 0000 1010 1010"),a,0);var b=[bin("011110 100001 010101 010101"),bin("011110 100001 010101 010101")];assert.deepEqual(a,b)});it("should expand with low 1",function(){var a=[0,0];utils.expand(bin("1111 0000 1010 1010 1111 0000 1010 1011"),a,0);var b=[bin("111110 100001 010101 010101"),bin("011110 100001 010101 010111")];assert.deepEqual(a,b)});it("should expand with low 1",function(){var a=[0,0];utils.expand(bin("10100010 01011100 00001011 11110100"),a,0);var b=[bin("010100 000100 001011 111000"),bin("000001 010111 111110 101001")];assert.deepEqual(a,b)})});describe("substitute",function(){it("should substitute",function(){var b=[bin("011000 010001 011110 111010"),bin("100001 100110 010100 100111")];var a=utils.substitute(b[0],b[1]);assert.equal(a,bin("0101 1100 1000 0010 1011 0101 1001 0111"))})});describe("permute",function(){it("should permute",function(){var a=utils.permute(bin("0101 1100 1000 0010 1011 0101 1001 0111"));assert.equal(a,bin("0010 0011 0100 1010 1010 1001 1011 1011"))})})});