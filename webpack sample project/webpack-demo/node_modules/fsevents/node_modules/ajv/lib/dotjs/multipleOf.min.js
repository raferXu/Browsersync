"use strict";module.exports=function generate_multipleOf(j,b){var i=" ";var h=j.level;var m=j.dataLevel;var n=j.schema[b];var d=j.schemaPath+j.util.getProperty(b);var c=j.errSchemaPath+"/"+b;var e=!j.opts.allErrors;var g="data"+(m||"");var k=j.opts.v5&&n&&n.$data,l;if(k){i+=" var schema"+(h)+" = "+(j.util.getData(n.$data,m,j.dataPathArr))+"; ";l="schema"+h}else{l=n}i+="var division"+(h)+";if (";if(k){i+=" "+(l)+" !== undefined && ( typeof "+(l)+" != 'number' || "}i+=" (division"+(h)+" = "+(g)+" / "+(l)+", ";if(j.opts.multipleOfPrecision){i+=" Math.abs(Math.round(division"+(h)+") - division"+(h)+") > 1e-"+(j.opts.multipleOfPrecision)+" "}else{i+=" division"+(h)+" !== parseInt(division"+(h)+") "}i+=" ) ";if(k){i+="  )  "}i+=" ) {   ";var a=a||[];a.push(i);i="";if(j.createErrors!==false){i+=" { keyword: '"+("multipleOf")+"' , dataPath: (dataPath || '') + "+(j.errorPath)+" , schemaPath: "+(j.util.toQuotedString(c))+" , params: { multipleOf: "+(l)+" } ";if(j.opts.messages!==false){i+=" , message: 'should be multiple of ";if(k){i+="' + "+(l)}else{i+=""+(n)+"'"}}if(j.opts.verbose){i+=" , schema:  ";if(k){i+="validate.schema"+(d)}else{i+=""+(n)}i+="         , parentSchema: validate.schema"+(j.schemaPath)+" , data: "+(g)+" "}i+=" } "}else{i+=" {} "}var f=i;i=a.pop();if(!j.compositeRule&&e){if(j.async){i+=" throw new ValidationError(["+(f)+"]); "}else{i+=" validate.errors = ["+(f)+"]; return false; "}}else{i+=" var err = "+(f)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}i+="} ";if(e){i+=" else { "}return i};