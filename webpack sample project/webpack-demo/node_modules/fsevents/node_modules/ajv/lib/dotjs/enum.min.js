"use strict";module.exports=function generate_enum(k,b){var j=" ";var i=k.level;var n=k.dataLevel;var p=k.schema[b];var d=k.schemaPath+k.util.getProperty(b);var c=k.errSchemaPath+"/"+b;var e=!k.opts.allErrors;var h="data"+(n||"");var q="valid"+i;var l=k.opts.v5&&p&&p.$data,m;if(l){j+=" var schema"+(i)+" = "+(k.util.getData(p.$data,n,k.dataPathArr))+"; ";m="schema"+i}else{m=p}var o="i"+i,f="schema"+i;if(!l){j+=" var "+(f)+" = validate.schema"+(d)+";"}j+="var "+(q)+";";if(l){j+=" if (schema"+(i)+" === undefined) "+(q)+" = true; else if (!Array.isArray(schema"+(i)+")) "+(q)+" = false; else {"}j+=""+(q)+" = false;for (var "+(o)+"=0; "+(o)+"<"+(f)+".length; "+(o)+"++) if (equal("+(h)+", "+(f)+"["+(o)+"])) { "+(q)+" = true; break; }";if(l){j+="  }  "}j+=" if (!"+(q)+") {   ";var a=a||[];a.push(j);j="";if(k.createErrors!==false){j+=" { keyword: '"+("enum")+"' , dataPath: (dataPath || '') + "+(k.errorPath)+" , schemaPath: "+(k.util.toQuotedString(c))+" , params: { allowedValues: schema"+(i)+" } ";if(k.opts.messages!==false){j+=" , message: 'should be equal to one of the allowed values' "}if(k.opts.verbose){j+=" , schema: validate.schema"+(d)+" , parentSchema: validate.schema"+(k.schemaPath)+" , data: "+(h)+" "}j+=" } "}else{j+=" {} "}var g=j;j=a.pop();if(!k.compositeRule&&e){if(k.async){j+=" throw new ValidationError(["+(g)+"]); "}else{j+=" validate.errors = ["+(g)+"]; return false; "}}else{j+=" var err = "+(g)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}j+=" }";if(e){j+=" else { "}return j};