"use strict";module.exports=function generate_pattern(k,b){var j=" ";var i=k.level;var n=k.dataLevel;var o=k.schema[b];var d=k.schemaPath+k.util.getProperty(b);var c=k.errSchemaPath+"/"+b;var e=!k.opts.allErrors;var h="data"+(n||"");var l=k.opts.v5&&o&&o.$data,m;if(l){j+=" var schema"+(i)+" = "+(k.util.getData(o.$data,n,k.dataPathArr))+"; ";m="schema"+i}else{m=o}var f=l?"(new RegExp("+m+"))":k.usePattern(o);j+="if ( ";if(l){j+=" ("+(m)+" !== undefined && typeof "+(m)+" != 'string') || "}j+=" !"+(f)+".test("+(h)+") ) {   ";var a=a||[];a.push(j);j="";if(k.createErrors!==false){j+=" { keyword: '"+("pattern")+"' , dataPath: (dataPath || '') + "+(k.errorPath)+" , schemaPath: "+(k.util.toQuotedString(c))+" , params: { pattern:  ";if(l){j+=""+(m)}else{j+=""+(k.util.toQuotedString(o))}j+="  } ";if(k.opts.messages!==false){j+=" , message: 'should match pattern \"";if(l){j+="' + "+(m)+" + '"}else{j+=""+(k.util.escapeQuotes(o))}j+="\"' "}if(k.opts.verbose){j+=" , schema:  ";if(l){j+="validate.schema"+(d)}else{j+=""+(k.util.toQuotedString(o))}j+="         , parentSchema: validate.schema"+(k.schemaPath)+" , data: "+(h)+" "}j+=" } "}else{j+=" {} "}var g=j;j=a.pop();if(!k.compositeRule&&e){if(k.async){j+=" throw new ValidationError(["+(g)+"]); "}else{j+=" validate.errors = ["+(g)+"]; return false; "}}else{j+=" var err = "+(g)+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}j+="} ";if(e){j+=" else { "}return j};