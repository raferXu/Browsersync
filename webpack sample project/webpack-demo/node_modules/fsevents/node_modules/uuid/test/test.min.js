var assert=require("assert");var uuid=require("../");var TIME=1321644961388;function compare(a,b){test(a,function(){for(var d=0;d<b.length;++d){b[d]=b[d].split("-").reverse().join("-")}b=b.sort();var c=([].concat(b)).sort();assert(c.toString()==b.toString(),a+" have expected order")})}compare("uuids with current time",[uuid.v1(),uuid.v1(),uuid.v1(),uuid.v1(),uuid.v1()]);compare("uuids with time option",[uuid.v1({msecs:TIME-10*3600*1000}),uuid.v1({msecs:TIME-1}),uuid.v1({msecs:TIME}),uuid.v1({msecs:TIME+1}),uuid.v1({msecs:TIME+28*24*3600*1000})]);test("msec",function(){assert(uuid.v1({msecs:TIME})!=uuid.v1({msecs:TIME}),"IDs created at same msec are different")});test("exception thrown when > 10k ids created in 1ms",function(){var a=false;try{uuid.v1({msecs:TIME,nsecs:10000})}catch(b){a=true}assert(a,"Exception thrown when > 10K ids created in 1 ms")});test("clock regression by msec",function(){var a=uuid.v1({msecs:TIME});var b=uuid.v1({msecs:TIME-1});assert(parseInt(b.split("-")[3],16)-parseInt(a.split("-")[3],16)===1,"Clock regression by msec increments the clockseq")});test("clock regression by nsec",function(){var b=uuid.v1({msecs:TIME,nsecs:10});var a=uuid.v1({msecs:TIME,nsecs:9});assert(parseInt(a.split("-")[3],16)-parseInt(b.split("-")[3],16)===1,"Clock regression by nsec increments the clockseq")});test("explicit options product expected id",function(){var a=uuid.v1({msecs:1321651533573,nsecs:5432,clockseq:14428,node:[97,205,60,187,50,16]});assert(a=="d9428888-122b-11e1-b85c-61cd3cbb3210","Explicit options produce expected id")});test("ids spanning 1ms boundary are 100ns apart",function(){var e=uuid.v1({msecs:TIME,nsecs:9999});var c=uuid.v1({msecs:TIME+1,nsecs:0});var b=e.split("-")[0],d=c.split("-")[0];var a=parseInt(d,16)-parseInt(b,16);assert(a===1,"Ids spanning 1ms boundary are 100ns apart")});