var Code=require("code");var Hoek=require("../lib");var Lab=require("lab");var internals={};var lab=exports.lab=Lab.script();var describe=lab.experiment;var it=lab.test;var expect=Code.expect;describe("escapeJavaScript()",function(){it("encodes / characters",function(a){var b=Hoek.escapeJavaScript("<script>alert(1)<\/script>");expect(b).to.equal("\\x3cscript\\x3ealert\\x281\\x29\\x3c\\x2fscript\\x3e");a()});it("encodes ' characters",function(a){var b=Hoek.escapeJavaScript("something('param')");expect(b).to.equal("something\\x28\\x27param\\x27\\x29");a()});it("encodes large unicode characters with the correct padding",function(a){var b=Hoek.escapeJavaScript(String.fromCharCode(500)+String.fromCharCode(1000));expect(b).to.equal("\\u0500\\u1000");a()});it("doesn't throw an exception when passed null",function(a){var b=Hoek.escapeJavaScript(null);expect(b).to.equal("");a()})});describe("escapeHtml()",function(){it("encodes / characters",function(a){var b=Hoek.escapeHtml("<script>alert(1)<\/script>");expect(b).to.equal("&lt;script&gt;alert&#x28;1&#x29;&lt;&#x2f;script&gt;");a()});it("encodes < and > as named characters",function(a){var b=Hoek.escapeHtml("<script><>");expect(b).to.equal("&lt;script&gt;&lt;&gt;");a()});it("encodes large unicode characters",function(a){var b=Hoek.escapeHtml(String.fromCharCode(500)+String.fromCharCode(1000));expect(b).to.equal("&#500;&#1000;");a()});it("doesn't throw an exception when passed null",function(a){var b=Hoek.escapeHtml(null);expect(b).to.equal("");a()});it("encodes {} characters",function(a){var b=Hoek.escapeHtml("{}");expect(b).to.equal("&#x7b;&#x7d;");a()})});