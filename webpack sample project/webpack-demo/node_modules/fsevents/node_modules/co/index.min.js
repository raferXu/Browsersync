var slice=Array.prototype.slice;module.exports=co["default"]=co.co=co;co.wrap=function(a){b.__generatorFunction__=a;return b;function b(){return co.call(this,a.apply(this,arguments))}};function co(c){var a=this;var b=slice.call(arguments,1);return new Promise(function(g,f){if(typeof c==="function"){c=c.apply(a,b)}if(!c||typeof c.next!=="function"){return g(c)}h();function h(j){var i;try{i=c.next(j)}catch(k){return f(k)}e(i)}function d(j){var i;try{i=c.throw(j)}catch(k){return f(k)}e(i)}function e(i){if(i.done){return g(i.value)}var j=toPromise.call(a,i.value);if(j&&isPromise(j)){return j.then(h,d)}return d(new TypeError('You may only yield a function, promise, generator, array, or object, but the following object was passed: "'+String(i.value)+'"'))}})}function toPromise(a){if(!a){return a}if(isPromise(a)){return a}if(isGeneratorFunction(a)||isGenerator(a)){return co.call(this,a)}if("function"==typeof a){return thunkToPromise.call(this,a)}if(Array.isArray(a)){return arrayToPromise.call(this,a)}if(isObject(a)){return objectToPromise.call(this,a)}return a}function thunkToPromise(b){var a=this;return new Promise(function(d,c){b.call(a,function(f,e){if(f){return c(f)}if(arguments.length>2){e=slice.call(arguments,1)}d(e)})})}function arrayToPromise(a){return Promise.all(a.map(toPromise,this))}function objectToPromise(f){var d=new f.constructor();var e=Object.keys(f);var c=[];for(var b=0;b<e.length;b++){var a=e[b];var h=toPromise.call(this,f[a]);if(h&&isPromise(h)){g(h,a)}else{d[a]=f[a]}}return Promise.all(c).then(function(){return d});function g(j,i){d[i]=undefined;c.push(j.then(function(k){d[i]=k}))}}function isPromise(a){return"function"==typeof a.then}function isGenerator(a){return"function"==typeof a.next&&"function"==typeof a.throw}function isGeneratorFunction(b){var a=b.constructor;if(!a){return false}if("GeneratorFunction"===a.name||"GeneratorFunction"===a.displayName){return true}return isGenerator(a.prototype)}function isObject(a){return Object==a.constructor};