"use strict";if(process.platform!=="darwin"){throw new Error("Module 'fsevents' is not compatible with platform '"+process.platform+"'")}var path=require("path");var binary=require("node-pre-gyp");var Native=require(binary.find(path.join(__dirname,"package.json")));var EventEmitter=require("events").EventEmitter;var fs=require("fs");var inherits=require("util").inherits;function FSEvents(b,a){EventEmitter.call(this);Object.defineProperty(this,"_impl",{value:new Native.FSEvents(String(b||""),a),enumerable:false,writable:false})}inherits(FSEvents,EventEmitter);proxies(FSEvents,Native.FSEvents);module.exports=watch;module.exports.getInfo=getInfo;module.exports.FSEvents=Native.FSEvents;module.exports.Constants=Native.Constants;var defer=global.setImmediate||process.nextTick;function watch(c){var b=new FSEvents(String(c||""),a);EventEmitter.call(b);return b;function a(e,d,f){defer(function(){b.emit("fsevent",e,d,f);var g=getInfo(e,d);g.id=f;if(g.event==="moved"){fs.stat(g.path,function(i,h){g.event=(i||!h)?"moved-out":"moved-in";b.emit("change",e,g);b.emit(g.event,e,g)})}else{b.emit("change",e,g);b.emit(g.event,e,g)}})}}function proxies(a,b){Object.keys(b.prototype).filter(function(c){return typeof b.prototype[c]==="function"}).forEach(function(c){a.prototype[c]=function(){this._impl[c].apply(this._impl,arguments);return this}})}function getFileType(a){if(Native.Constants.kFSEventStreamEventFlagItemIsFile&a){return"file"}if(Native.Constants.kFSEventStreamEventFlagItemIsDir&a){return"directory"}if(Native.Constants.kFSEventStreamEventFlagItemIsSymlink&a){return"symlink"}}function getEventType(a){if(Native.Constants.kFSEventStreamEventFlagItemRemoved&a){return"deleted"}if(Native.Constants.kFSEventStreamEventFlagItemRenamed&a){return"moved"}if(Native.Constants.kFSEventStreamEventFlagItemCreated&a){return"created"}if(Native.Constants.kFSEventStreamEventFlagItemModified&a){return"modified"}if(Native.Constants.kFSEventStreamEventFlagRootChanged&a){return"root-changed"}return"unknown"}function getFileChanges(a){return{inode:!!(Native.Constants.kFSEventStreamEventFlagItemInodeMetaMod&a),finder:!!(Native.Constants.kFSEventStreamEventFlagItemFinderInfoMod&a),access:!!(Native.Constants.kFSEventStreamEventFlagItemChangeOwner&a),xattrs:!!(Native.Constants.kFSEventStreamEventFlagItemXattrMod&a)}}function getInfo(b,a){return{path:b,event:getEventType(a),type:getFileType(a),changes:getFileChanges(a),flags:a}};