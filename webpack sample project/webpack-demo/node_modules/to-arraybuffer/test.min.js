var Buffer=require("buffer").Buffer;var test=require("tape");var toArrayBuffer=require(".");function elementsEqual(d,b){var a=new Uint8Array(d);for(var c=0;c<a.length;c++){if(a[c]!==b[c]){return false}}return true}test("Basic behavior",function(c){var a=new Buffer(10);for(var b=0;b<10;b++){a[b]=b}var d=toArrayBuffer(a);c.equals(d.byteLength,10,"correct length");c.ok(elementsEqual(d,a),"elements equal");c.end()});test("Behavior when input is a subarray 1",function(c){var d=new Buffer(10);for(var b=0;b<10;b++){d[b]=b}var a=d.slice(1);var e=toArrayBuffer(a);c.equals(e.byteLength,9,"correct length");c.ok(elementsEqual(e,a),"elements equal");c.notOk(e===a.buffer,"the underlying ArrayBuffer is not returned when incorrect");c.end()});test("Behavior when input is a subarray 2",function(c){var d=new Buffer(10);for(var b=0;b<10;b++){d[b]=b}var a=d.slice(0,9);var e=toArrayBuffer(a);c.equals(e.byteLength,9,"correct length");c.ok(elementsEqual(e,a),"elements equal");c.notOk(e===a.buffer,"the underlying ArrayBuffer is not returned when incorrect");c.end()});