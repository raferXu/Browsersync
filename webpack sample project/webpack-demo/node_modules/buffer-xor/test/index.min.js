var assert=require("assert");var xor=require("../");var xorInplace=require("../inplace");var fixtures=require("./fixtures");describe("xor",function(){fixtures.forEach(function(a){it("returns "+a.expected+" for "+a.a+"/"+a.b,function(){var d=new Buffer(a.a,"hex");var c=new Buffer(a.b,"hex");var e=xor(d,c);assert.equal(e.toString("hex"),a.expected);assert.equal(d.toString("hex"),a.a);assert.equal(c.toString("hex"),a.b)})})});describe("xor/inplace",function(){fixtures.forEach(function(a){it("returns "+a.expected+" for "+a.a+"/"+a.b,function(){var d=new Buffer(a.a,"hex");var c=new Buffer(a.b,"hex");var e=xorInplace(d,c);assert.equal(e.toString("hex"),a.expected);assert.equal(d.toString("hex"),a.mutated||a.expected);assert.equal(c.toString("hex"),a.b)})})});