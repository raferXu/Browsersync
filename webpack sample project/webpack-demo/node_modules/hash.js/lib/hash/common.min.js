"use strict";var utils=require("./utils");var assert=require("minimalistic-assert");function BlockHash(){this.pending=null;this.pendingTotal=0;this.blockSize=this.constructor.blockSize;this.outSize=this.constructor.outSize;this.hmacStrength=this.constructor.hmacStrength;this.padLength=this.constructor.padLength/8;this.endian="big";this._delta8=this.blockSize/8;this._delta32=this.blockSize/32}exports.BlockHash=BlockHash;BlockHash.prototype.update=function update(d,a){d=utils.toArray(d,a);if(!this.pending){this.pending=d}else{this.pending=this.pending.concat(d)}this.pendingTotal+=d.length;if(this.pending.length>=this._delta8){d=this.pending;var c=d.length%this._delta8;this.pending=d.slice(d.length-c,d.length);if(this.pending.length===0){this.pending=null}d=utils.join32(d,0,d.length-c,this.endian);for(var b=0;b<d.length;b+=this._delta32){this._update(d,b,b+this._delta32)}}return this};BlockHash.prototype.digest=function digest(a){this.update(this._pad());assert(this.pending===null);return this._digest(a)};BlockHash.prototype._pad=function pad(){var a=this.pendingTotal;var b=this._delta8;var c=b-((a+this.padLength)%b);var f=new Array(c+this.padLength);f[0]=128;for(var e=1;e<c;e++){f[e]=0}a<<=3;if(this.endian==="big"){for(var d=8;d<this.padLength;d++){f[e++]=0}f[e++]=0;f[e++]=0;f[e++]=0;f[e++]=0;f[e++]=(a>>>24)&255;f[e++]=(a>>>16)&255;f[e++]=(a>>>8)&255;f[e++]=a&255}else{f[e++]=a&255;f[e++]=(a>>>8)&255;f[e++]=(a>>>16)&255;f[e++]=(a>>>24)&255;f[e++]=0;f[e++]=0;f[e++]=0;f[e++]=0;for(d=8;d<this.padLength;d++){f[e++]=0}}return f};