"use strict";var utils=require("../utils");var common=require("../common");var shaCommon=require("./common");var assert=require("minimalistic-assert");var sum32=utils.sum32;var sum32_4=utils.sum32_4;var sum32_5=utils.sum32_5;var ch32=shaCommon.ch32;var maj32=shaCommon.maj32;var s0_256=shaCommon.s0_256;var s1_256=shaCommon.s1_256;var g0_256=shaCommon.g0_256;var g1_256=shaCommon.g1_256;var BlockHash=common.BlockHash;var sha256_K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function SHA256(){if(!(this instanceof SHA256)){return new SHA256()}BlockHash.call(this);this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];this.k=sha256_K;this.W=new Array(64)}utils.inherits(SHA256,BlockHash);module.exports=SHA256;SHA256.blockSize=512;SHA256.outSize=256;SHA256.hmacStrength=192;SHA256.padLength=64;SHA256.prototype._update=function _update(k,j){var l=this.W;for(var m=0;m<16;m++){l[m]=k[j+m]}for(;m<l.length;m++){l[m]=sum32_4(g1_256(l[m-2]),l[m-7],g0_256(l[m-15]),l[m-16])}var w=this.h[0];var v=this.h[1];var u=this.h[2];var t=this.h[3];var r=this.h[4];var p=this.h[5];var o=this.h[6];var n=this.h[7];assert(this.k.length===l.length);for(m=0;m<l.length;m++){var s=sum32_5(n,s1_256(r),ch32(r,p,o),this.k[m],l[m]);var q=sum32(s0_256(w),maj32(w,v,u));n=o;o=p;p=r;r=sum32(t,s);t=u;u=v;v=w;w=sum32(s,q)}this.h[0]=sum32(this.h[0],w);this.h[1]=sum32(this.h[1],v);this.h[2]=sum32(this.h[2],u);this.h[3]=sum32(this.h[3],t);this.h[4]=sum32(this.h[4],r);this.h[5]=sum32(this.h[5],p);this.h[6]=sum32(this.h[6],o);this.h[7]=sum32(this.h[7],n)};SHA256.prototype._digest=function digest(a){if(a==="hex"){return utils.toHex32(this.h,"big")}else{return utils.split32(this.h,"big")}};